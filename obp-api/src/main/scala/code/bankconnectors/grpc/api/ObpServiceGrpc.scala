// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package code.bankconnectors.grpc.api


object ObpServiceGrpc {
  val METHOD_GET_BANKS: _root_.io.grpc.MethodDescriptor[com.google.protobuf.empty.Empty, code.bankconnectors.grpc.api.BanksJson400Grpc] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("code.bankconnectors.grpc.ObpService", "getBanks"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.google.protobuf.empty.Empty])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[code.bankconnectors.grpc.api.BanksJson400Grpc])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(code.bankconnectors.grpc.api.ApiProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_GET_BANK: _root_.io.grpc.MethodDescriptor[code.bankconnectors.grpc.api.BankIdGrpc, code.bankconnectors.grpc.api.BankJson400Grpc] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("code.bankconnectors.grpc.ObpService", "getBank"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[code.bankconnectors.grpc.api.BankIdGrpc])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[code.bankconnectors.grpc.api.BankJson400Grpc])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(code.bankconnectors.grpc.api.ApiProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("code.bankconnectors.grpc.ObpService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(code.bankconnectors.grpc.api.ApiProto.javaDescriptor))
      .addMethod(METHOD_GET_BANKS)
      .addMethod(METHOD_GET_BANK)
      .build()
  
  trait ObpService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ObpService] = ObpService
    /** Sends a greeting
      */
    def getBanks(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[code.bankconnectors.grpc.api.BanksJson400Grpc]
    def getBank(request: code.bankconnectors.grpc.api.BankIdGrpc): scala.concurrent.Future[code.bankconnectors.grpc.api.BankJson400Grpc]
  }
  
  object ObpService extends _root_.scalapb.grpc.ServiceCompanion[ObpService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ObpService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = code.bankconnectors.grpc.api.ApiProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = code.bankconnectors.grpc.api.ApiProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: ObpService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_GET_BANKS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: com.google.protobuf.empty.Empty, observer: _root_.io.grpc.stub.StreamObserver[code.bankconnectors.grpc.api.BanksJson400Grpc]) => {
          serviceImpl.getBanks(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_BANK,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: code.bankconnectors.grpc.api.BankIdGrpc, observer: _root_.io.grpc.stub.StreamObserver[code.bankconnectors.grpc.api.BankJson400Grpc]) => {
          serviceImpl.getBank(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  trait ObpServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ObpService] = ObpService
    /** Sends a greeting
      */
    def getBanks(request: com.google.protobuf.empty.Empty): code.bankconnectors.grpc.api.BanksJson400Grpc
    def getBank(request: code.bankconnectors.grpc.api.BankIdGrpc): code.bankconnectors.grpc.api.BankJson400Grpc
  }
  
  class ObpServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ObpServiceBlockingStub](channel, options) with ObpServiceBlockingClient {
    /** Sends a greeting
      */
    override def getBanks(request: com.google.protobuf.empty.Empty): code.bankconnectors.grpc.api.BanksJson400Grpc = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_BANKS, options, request)
    }
    
    override def getBank(request: code.bankconnectors.grpc.api.BankIdGrpc): code.bankconnectors.grpc.api.BankJson400Grpc = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_BANK, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ObpServiceBlockingStub = new ObpServiceBlockingStub(channel, options)
  }
  
  class ObpServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ObpServiceStub](channel, options) with ObpService {
    /** Sends a greeting
      */
    override def getBanks(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[code.bankconnectors.grpc.api.BanksJson400Grpc] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_BANKS, options, request)
    }
    
    override def getBank(request: code.bankconnectors.grpc.api.BankIdGrpc): scala.concurrent.Future[code.bankconnectors.grpc.api.BankJson400Grpc] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_BANK, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ObpServiceStub = new ObpServiceStub(channel, options)
  }
  
  object ObpServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[ObpServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ObpServiceStub = new ObpServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[ObpServiceStub] = this
  }
  
  def bindService(serviceImpl: ObpService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = ObpService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): ObpServiceBlockingStub = new ObpServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): ObpServiceStub = new ObpServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = code.bankconnectors.grpc.api.ApiProto.javaDescriptor.getServices().get(0)
  
}